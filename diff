139c139
< 
---
> //这个是对Agent/ZBR的设置
211,212c211,212
< //
< 
---
> //上面的是关于Agent/ZBR 的设置
> //这个是关于 节点的设置
301c301
< 
---
> 			  	//index 应该是唯一标志的地址吧
348c348,349
< 
---
> //这个应该是一个修复的把？ 关于具体的修复场景？
> //这个需要详细的了解 询问下
419c420
< 
---
> //清除生存时间过期的数据
438c439
< 
---
> //这个应该是计算时延的吧？
462c463,464
< 
---
> //test_for_dy
> //还未懂
661c663
< 
---
> //设置链路可用
671c673
< 
---
> //设置链路不可用
693a696,699
> //test_for_dy
> //链路控制程序
>   //决定到底是转还是发起寻找的过程
>   //rt routing table 管理的程序
694a701
>   //这个是在什么情况下会出发这个函数的呢？
697,698c704,705
< 	struct hdr_cmn *ch = HDR_CMN(p);
< 	struct hdr_ip *ih = HDR_IP(p);
---
> 	struct hdr_cmn *ch = HDR_CMN(p); //得到包头
> 	struct hdr_ip *ih = HDR_IP(p);//得到ip头
716c723
< 	
---
> 	//ih-daddr 返回的是完整的地址
724c731
< 	
---
> 	//这个是在判断 路由表中是否有对应的路径  如果有就直接传送
731c738,739
< 		if (RNType == 0) {
---
> 	   	if (RNType == 0) {
> 			//这个应该是找到下一跳的地址
733c741
< 			
---
> 			//这个是在邻居表中寻找一次路径
739a748
> 			//如果路由表中没有这个字段或者路径不存在不能使用的话  并且 邻居表不存在或者邻居表的不能传输的话  那么就直接使用树协议
747a757,761
> 					//表示是邻居这个线路是有问题的不能正常使用情况下或者是没有对应的邻居有相应的路由表存在就进行一次请求
> 					//添加这个路由条目的原因是什么的呢？ 添加一个到目的地址的节点 进行路由请求 这样之后有对应的路由就可以直接发送了 在最上面的一层的判断处
> 					//会不会之后如果收到了具体的就更新 要不然到了规定的时间就自己清除了？
> 					//添加的这个ih->daddr 就是这个路径的目的弟子
> 					//rt->rt_dst = ih->daddr
753c767,769
< 				
---
> 				//设置源地址来进行覆盖?
> 				//为了进行反向的时候使用  千真万确就是为了当获取到了回复的时候 进行反向链接的地址 
> 				//表示这个是前一跳的地址
755c771
< 				
---
> 				//当前没有具体的路径  发起一个请求寻找具体的路径？
767a784
> 				//添加这个的目地就是为了下面之后的操作assert不会失败
780c797
< 	 	
---
> 	 		//这表示如果不是源节点的话先建立反向路由
797,798c814,815
< 	   			}
< 	  
---
> 	   			}//到这为止  反向路由建立完成
> 	  				
804c821,822
< 	     			//
---
> 	     			//可能这个反向路由对有的路由包有作用  对buffer的包进行处理
> 	   				//对于rt0的执行看是否存在或者存在是否为down来确定执行
838c856
< 
---
> //给一个目的地址  然后返回下一跳的地址 根据树模型
901a920
> 	   //这个表示的是如果路由表中的链路是可用  但是过期时间已经到了 就全部抛弃
914a934
> 	   //这个表示的是如果路由表中的链路是可用  但是过期时间还没到 就全部遍历一次缓存的buffer 如果有恰当的就进行传输
925a946
> 	   //查看缓存的buffer 中 是否有对应的目的地址  如果有的话就进行一次路由的请求来进行路由
943a965
> 	   //这个地址的设置真的是头大的很啊
960,961c982,983
< 	struct hdr_cmn *ch = HDR_CMN(p);
< 	struct hdr_ip *ih = HDR_IP(p);
---
> 	struct hdr_cmn *ch = HDR_CMN(p);//得到包头
> 	struct hdr_ip *ih = HDR_IP(p);//得到ip头
969a992,993
> 	//设置一个邻居节点 插入到邻居节点   节点为上一跳的地址
> 	//只有ch 才有上一条下一跳的么？
972a997
> 	//这里通过设置一跳的地址为可用 之后如果有恰当的话就可以直接使用的了
983c1008
< 	if(ch->ptype() == PT_ZBR) {
---
> 	if(ch->ptype() == PT_ZBR) {//这是处理广播的  就是路由选路的选择
984a1010
> 	   //这个函数的作用是什么？？
992c1018
< 	
---
> 	//表示这个节点包是从我这里开始传出去的   
1005a1032
> 	//这表示是一个环路 回环了 就丢弃数据包
1016a1044
> 		//节点的条数为0 也表示为0 就是直接丢弃节点包就ok
1026c1054,1055
< 	   rt_resolve(p);	
---
> 		//不是广播的包进行自己的一次路由表查询 
> 	   rt_resolve(p);	//不是广播包 进行解析
1037c1066
<  assert(HDR_IP (p)->sport() == RT_PORT);
---
>  assert(HDR_IP (p)->sport() == RT_PORT);//这个表示的是所有的都接受
1059c1088
< 
---
> //在这个函数里面找到了两个sendReply表明是确实收到了最后的目的地址了 需要进行回复
1077c1106,1107
< 	
---
> 	//自己发送的请求包  自己接受到了
> 	//这个是rq中的地址就是最后的目的地址 和最开始的地址  通过判断
1090c1120,1121
< 	 	
---
> 	 	//这个表示到请求的源地址 的下一跳的地址
> 	 	//表示是请求的地址作为树模型来进行传送的
1095c1126,1129
< 	 	
---
> 	 	//为什么使用这两个进行比较呢？
> 	 	//这个觉得好巧妙  说不出来味道
> 	 	//在这一步之前设置了ip为上一跳的地址的
> 	 	//ih->saddr()=index  通过这里设置了的
1097c1131,1132
< 	 		
---
> 	 		//表示当前的节点是目的节点  就发送接收到的请求
> 	 		//这个是最终的目的地址才能发送回复所以请求的目的地址是这个
1098a1134,1135
> 	   			//这个只能够一跳一跳的进行回复
> 	   			//表示回复穿过来的那一跳的节点
1107c1144,1145
< 	 		
---
> 	 		//感觉这就是像一个回环的一样  需要直接删除掉
> 	             	//表示按照树形的话  下一跳就是之前的前一跳地址  所以并没什么必要 直接删除就行
1111a1150,1152
> 				//表示进行对应的转发都是改变ip包的操作而不是请求包的操作
> 				//进行ip包的设置   并进行广播 转为树路由传播
> 				//进行的是ip包的设置 请求包只是作为一个使用进行查找而已
1126c1167
< 	
---
> 	//表示这个广播的请求包已经转发过了 就直接抛弃  不再需要继续的转发了
1139a1181
> 	//第一次进行缓存  以后有重复的进来就直接进行抛弃 
1173c1215,1216
< 	//
---
> 	   //建立一个反向路由就要对缓存的数据包进行对应的扫描发送
> 	//反向路由的刷新？
1215c1258
< 	
---
> 	//如果请求的最终目的地址就是等于当前节点的地址的话  那么就进行反馈  
1227c1270
< 	   
---
> 
1241a1285,1286
> 		//相当于这里不能进行回复 就进行对应的广播转发
> 		//这里设置index就相当于说这个是一个前一跳  如果你没有对应的路径 你可以从中找到并且进行设置
1251a1297
> //请求包的目的地址主要为index  应该是为了之后的判断进行从新转发的需要
1290c1336
< 	     		rp->rp_src = index;  //question: why?
---
> 	     		rp->rp_src = index;  //question: why? //表示在请求包中就进行了改变  在ip包中是最后的目的地址
1346c1392,1395
< 	    
---
> 	    //这个就是两个index相等的情况
> 	    //找到设置对应的rt_ori_src 的地方
> 	    //2017/1/2 表明第一个参数是发送的地址也就是本节点的地址  因为会判断是不是自己发送的
> 	    //第三个为下一跳的地址能够直接传送过去的地址
1348c1397
< 			sendReply(rp->rp_dst,           // IP Destination
---
> 			sendReply(rp->rp_dst,           // IP Destination    //第一个才是最后的目的地址
1350c1399
< 	             		rt->rt_ori_src,                // Dest IP Address
---
> 	             		rt->rt_ori_src,                // Dest IP Address   //表示第三个只是一个下一跳的地址而已 
1375a1425
> 		//表示的是阻止生长的意思  不准虚接受？
1382c1432
< 	
---
> 	//表示如果我就是最后的接受者 那就给我要不发就进行转发
1389a1440
> 		//这就是进行对应的转发 如果链路正常的话那么就进行转发  需要修改回复包的对应内容 就是回复包的源地址该为当地地址就行了
1427c1478,1479
< 
---
> 	//在这里的here代表什么意思呢？没找到定义
> 	//这个表是的是如果是一个广播包的话或者  就是发给我自己的包我就收下  
1435a1488
> 	//这个表示的是如果不能当前节点接受的话  就需要进行转发需要在各个节点上进行设置  前置的节点 前置的跳
1442a1496
> 	   //这里表示如果在路由表中存在对应的链路 那么就设置节点包的下一跳的地址为当前链路信息额下一跳就可
1449c1503
< 	
---
> 		//这里为什么是向下的呢？还有几种方法？
1458c1512
< 	
---
> 	//关于是否为广播包的使用和理解 还有延时的使用
1511c1565
< 
---
> //对于请求包的设置 难道没有区分树和其他模型？
1521c1575,1576
< 	
---
> 	//在之前进行了一次添加  所以说就一定能在路由表里面找到对应的
> 	//在之前默认添加一个路径的时候是默认为down的
1528c1583
< 	
---
> 	//这里应该是添加一些控制的要求
1543c1598
< 	
---
> 	//这个表示的是我们最多可以进行广播的次数  如果次数超过了 自动的在表中进行查找删除
1547a1603
> 	//在超时包中删除 含有对应节点的包
1562c1618,1619
< 	
---
> 	//在这里是决定这个请求传播的范围可以加入具体的方法进行改进 ！！！！！ 
> 	//进行请求的范围就是寻找最佳路径的范围
1607a1665
> 	//进行数据包的填充
1612a1671
> 	//表示的跳树 上一跳地址
1614c1673
< 	
---
> 	//在这里ip表示为广播的包
1622a1682
> 	//在这里填写具体的目的地址在哪儿
1627c1687
< 	
---
> 			
1640c1700,1701
< 	
---
> 	//请求包的 请求源地址就是这个节点的当前地址
> 	 //相当于每次发送的请求包的请求的源地址都是本地地址  只是目的地址没有变化而已
1652c1713
< 
---
> //设置具体的包头节点信息 并发送
1653a1715
> //是否rrep只是需要进行回去的路线查找而不需要进行路由的寻路了？
1655c1717
< ZBR::sendReply(nsaddr_t ipdst, u_int32_t hop_count, nsaddr_t rpdst,
---
> ZBR::sendReply(nsaddr_t ipdst, u_int32_t hop_count, nsaddr_t rpdst,/*代表这个是收到最终目的地址节点的地址 作为发送的其实节点*/
1663a1726
> 	//之前进行了添加所以说一定能找到对应的
1669c1732
< 	
---
> 	//这个就是为了获得下一跳的地址
1670a1734
> 		//通过树形找到下一跳的地址
1686a1751,1754
> 	//源地址能理解  但是 目的地址为什么不是这个呢？
> 	//对于这两个地址的理解深入点
> 	//有两个rpdst==index??
> 	//对于源地址都是一样的 就只有目的地址不一样而已   请求包的目的地址为第三个 ip包的目的地址为第一个
1715c1783
< 	
---
> 	//这个ipdst表示的是最后的地址的么？
1717a1786
> 	//代表这个地址为发送待待接受的地址 这个并不是最终的发送请求的源节点的地址
1729c1798
< 
---
> //以下是对邻居节点的 管理 插入  删除   合并 查找
1823a1893
> //计算每一层的客使用节点的偏移量
1842a1913
> //这是计算全部能使用为节点个数
