122d121
<           //printf("now my id is %s\n",argv[4]);
140c139
< //这个是对Agent/ZBR的设置
---
> 
212,213c211,212
< //上面的是关于Agent/ZBR 的设置
< //这个是关于 节点的设置
---
> //
> 
302c301
< 			  	//index 应该是唯一标志的地址吧
---
> 
315c314
< 	
---
> 
349,350c348
< //这个应该是一个修复的把？ 关于具体的修复场景？
< //这个需要详细的了解 询问下
---
> 
421c419
< //清除生存时间过期的数据
---
> 
440c438
< //这个应该是计算时延的吧？
---
> 
464,465c462
< //test_for_dy
< //还未懂
---
> 
664c661
< //设置链路可用
---
> 
674c671
< //设置链路不可用
---
> 
697,700d693
< //test_for_dy
< //链路控制程序
<   //决定到底是转还是发起寻找的过程
<   //rt routing table 管理的程序
702d694
<   //这个是在什么情况下会出发这个函数的呢？
705,706c697,698
< 	struct hdr_cmn *ch = HDR_CMN(p); //得到包头
< 	struct hdr_ip *ih = HDR_IP(p);//得到ip头
---
> 	struct hdr_cmn *ch = HDR_CMN(p);
> 	struct hdr_ip *ih = HDR_IP(p);
724c716
< 	//ih-daddr 返回的是完整的地址
---
> 	
732c724
< 	//这个是在判断 路由表中是否有对应的路径  如果有就直接传送
---
> 	
739,740c731
< 	   	if (RNType == 0) {
< 			//这个应该是找到下一跳的地址
---
> 		if (RNType == 0) {
742c733
< 			//这个是在邻居表中寻找一次路径
---
> 			
749d739
< 			//如果路由表中没有这个字段或者路径不存在不能使用的话  并且 邻居表不存在或者邻居表的不能传输的话  那么就直接使用树协议
758,762d747
< 					//表示是邻居这个线路是有问题的不能正常使用情况下或者是没有对应的邻居有相应的路由表存在就进行一次请求
< 					//添加这个路由条目的原因是什么的呢？ 添加一个到目的地址的节点 进行路由请求 这样之后有对应的路由就可以直接发送了 在最上面的一层的判断处
< 					//会不会之后如果收到了具体的就更新 要不然到了规定的时间就自己清除了？
< 					//添加的这个ih->daddr 就是这个路径的目的弟子
< 					//rt->rt_dst = ih->daddr
768,770c753
< 				//设置源地址来进行覆盖?
< 				//为了进行反向的时候使用  千真万确就是为了当获取到了回复的时候 进行反向链接的地址 
< 				//表示这个是前一跳的地址
---
> 				
772c755
< 				//当前没有具体的路径  发起一个请求寻找具体的路径？
---
> 				
785d767
< 				//添加这个的目地就是为了下面之后的操作assert不会失败
798c780
< 	 		//这表示如果不是源节点的话先建立反向路由
---
> 	 	
815,816c797,798
< 	   			}//到这为止  反向路由建立完成
< 	  				
---
> 	   			}
> 	  
822,823c804
< 	     			//可能这个反向路由对有的路由包有作用  对buffer的包进行处理
< 	   				//对于rt0的执行看是否存在或者存在是否为down来确定执行
---
> 	     			//
857c838
< //给一个目的地址  根据当前节点然后返回下一跳的地址 根据树模型
---
> 
921d901
< 	   //这个表示的是如果路由表中的链路是可用  但是过期时间已经到了 就全部抛弃
935d914
< 	   //这个表示的是如果路由表中的链路是可用  但是过期时间还没到 就全部遍历一次缓存的buffer 如果有恰当的就进行传输
947,948d925
< 	   //查看缓存的buffer 中 是否有对应的目的地址  如果有的话就进行一次路由的请求来进行路由
< 	   //这里说明链路有问题但是有相应的目的节点就需要进行一次路由路径的请求了
967d943
< 	   //这个地址的设置真的是头大的很啊
984,985c960,961
< 	struct hdr_cmn *ch = HDR_CMN(p);//得到包头
< 	struct hdr_ip *ih = HDR_IP(p);//得到ip头
---
> 	struct hdr_cmn *ch = HDR_CMN(p);
> 	struct hdr_ip *ih = HDR_IP(p);
994,995d969
< 	//设置一个邻居节点 插入到邻居节点   节点为上一跳的地址
< 	//只有ch 才有上一条下一跳的么？
999d972
< 	//这里通过设置一跳的地址为可用 之后如果有恰当的话就可以直接使用的了
1009,1010c982,983
< 	//这里就是请求的接受时候 因为是广播 所以为这里
< 	if(ch->ptype() == PT_ZBR) {//这是处理广播的  就是路由选路的选择
---
> 	
> 	if(ch->ptype() == PT_ZBR) {
1012d984
< 	   //这个函数的作用是什么？？
1020,1021c992
< 	//表示这个节点包是从我这里开始传出去的
< 	//这里表示这个几点还是没有变化  转发的次数为0   
---
> 	
1035d1005
< 	//这表示是一个环路 回环了 就丢弃数据包
1047d1016
< 		//节点的条数为0 也表示为0 就是直接丢弃节点包就ok
1057,1058c1026
< 		//不是广播的包进行自己的一次路由表查询 
< 	   rt_resolve(p);	//不是广播包 进行解析
---
> 	   rt_resolve(p);	
1069c1037
<  assert(HDR_IP (p)->sport() == RT_PORT);//这个表示的是所有的都接受
---
>  assert(HDR_IP (p)->sport() == RT_PORT);
1091c1059
< //在这个函数里面找到了两个sendReply表明是确实收到了最后的目的地址了 需要进行回复
---
> 
1094,1096d1061
< 	//printf("in %s my id is :%d dst is:%d\n",__FUNCTION__,index,dst );
< 	//printf("in %s now my id is :%d my NodeID is %d my depth is %d my ParentNodeID is %d \n",__FUNCTION__,index,myNodeID,myDepth,myParentNodeID );
< 	
1112,1126c1077
< 	//自己发送的请求包  自己接受到了
< 	//这个是rq中的地址就是最后的目的地址 和最开始的地址  通过判断
< 	printf("[ in %s\t,my id is:%d\t"
< 					"rq src is:%d\t"
< 					"rq dst is:%d\t"
< 					"ip src is %d\t"
< 					"ip dst is %d\t"
< 					"my NodeID is:%d\t]\n",
< 					__FUNCTION__,
< 					index,
< 					rq->rq_src,
< 					rq->rq_dst,
< 					ih->saddr(),
< 					ih->daddr(),
< 					myNodeID);
---
> 	
1137c1088
< 	 //这里表示为树路由的进行回复
---
> 	 
1139,1140c1090
< 	 	//这个表示到请求的源地址 的下一跳的地址
< 	 	//表示是请求的地址作为树模型来进行传送的
---
> 	 	
1145,1148c1095
< 	 	//为什么使用这两个进行比较呢？
< 	 	//这个觉得好巧妙  说不出来味道
< 	 	//在这一步之前设置了ip为上一跳的地址的
< 	 	//ih->saddr()=index  通过这里设置了的
---
> 	 	
1150,1151c1097
< 	 		//表示当前的节点是目的节点  就发送接收到的请求
< 	 		//这个是最终的目的地址才能发送回复所以请求的目的地址是这个
---
> 	 		
1153,1154d1098
< 	   			//这个只能够一跳一跳的进行回复
< 	   			//表示回复穿过来的那一跳的节点
1163,1164c1107
< 	 		//感觉这就是像一个回环的一样  需要直接删除掉
< 	             	//表示按照树形的话  下一跳就是之前的前一跳地址  所以并没什么必要 直接删除就行
---
> 	 		
1169,1171d1111
< 				//表示进行对应的转发都是改变ip包的操作而不是请求包的操作
< 				//进行ip包的设置   并进行广播 转为树路由传播
< 				//进行的是ip包的设置 请求包只是作为一个使用进行查找而已
1186c1126
< 	//表示这个广播的请求包已经转发过了 就直接抛弃  不再需要继续的转发了
---
> 	
1200d1139
< 	//第一次进行缓存  以后有重复的进来就直接进行抛弃 
1210c1149
< 	//查找有木有这个路由 如果没有就建立读应的反向路由
---
> 	
1234,1235c1173
< 	   //建立一个反向路由就要对缓存的数据包进行对应的扫描发送
< 	//反向路由的刷新？
---
> 	//
1257d1194
< 	     //建立了反向路由  如果有对应的包可以使用那么就进行传播
1278c1215
< 	//如果请求的最终目的地址就是等于当前节点的地址的话  那么就进行反馈  
---
> 	
1290c1227
< 	   //这个就是最开始的发送位置
---
> 	   
1305,1306d1241
< 		//相当于这里不能进行回复 就进行对应的广播转发
< 		//这里设置index就相当于说这个是一个前一跳  如果你没有对应的路径 你可以从中找到并且进行设置
1317d1251
< //请求包的目的地址主要为index  应该是为了之后的判断进行从新转发的需要
1326,1338c1260
< 	printf("[ in %s\t,my id is:%d\t"
< 					"rq src is:%d\t"
< 					"rq dst is:%d\t"
< 					"ip src is %d\t"
< 					"ip dst is %d\t"
< 					"my NodeID is:%d]\n",
< 					__FUNCTION__,
< 					index,
< 					rp->rp_src,
< 					rp->rp_dst,
< 					ih->saddr(),
< 					ih->daddr(),
< 					myNodeID);
---
> 	
1368,1369c1290
< 	     		rp->rp_src = index;  //question: why? //表示在请求包中就进行了改变  在ip包中是最后的目的地址
< 	     		//这个表示的是去下一跳的地址  通过树的协议 接收到的路由说明了下一跳的地址在哪里
---
> 	     		rp->rp_src = index;  //question: why?
1385d1305
< 		//？
1426,1432c1346
< 	    //这个就是两个index相等的情况
< 	    //找到设置对应的rt_ori_src 的地方
< 	    //2017/1/2 表明第一个参数是发送的地址也就是本节点的地址  因为会判断是不是自己发送的
< 	    //第三个为下一跳的地址能够直接传送过去的地址
< 	    //这个是不是代表两个收到回复后的回馈呢？
< 	    //这应该是一种对收到rrep的反馈  
< 	    //后面的才是决定是转发还是如果自己就是最后的目的地址就接受了
---
> 	    
1434c1348
< 			sendReply(rp->rp_dst,           // IP Destination    //第一个才是最后的目的地址 //这个地址就是之前传过来的index地址
---
> 			sendReply(rp->rp_dst,           // IP Destination
1436c1350
< 	             		rt->rt_ori_src,                // Dest IP Address   //表示第三个只是一个下一跳的地址而已 
---
> 	             		rt->rt_ori_src,                // Dest IP Address
1451d1364
< 	  //不存在的路由  建立了的话就进行使用  把暂时缓存的包都进行发送
1463d1375
< 		//表示的是阻止生长的意思  不准虚接受？
1470c1382
< 	//表示如果我就是最后的接受者 那就给我要不发就进行转发
---
> 	
1478d1389
< 		//这就是进行对应的转发 如果链路正常的话那么就进行转发  需要修改回复包的对应内容 就是回复包的源地址该为当地地址就行了
1516,1517c1427
< 	//在这里的here代表什么意思呢？没找到定义
< 	//这个表是的是如果是一个广播包的话或者  就是发给我自己的包我就收下  
---
> 
1526d1435
< 	//这个表示的是如果不能当前节点接受的话  就需要进行转发需要在各个节点上进行设置  前置的节点 前置的跳
1534d1442
< 	   //这里表示如果在路由表中存在对应的链路 那么就设置节点包的下一跳的地址为当前链路信息额下一跳就可
1541c1449
< 		//这里为什么是向下的呢？还有几种方法？
---
> 	
1550c1458
< 	//关于是否为广播包的使用和理解 还有延时的使用
---
> 	
1603c1511
< //对于请求包的设置 难道没有区分树和其他模型？
---
> 
1606,1613c1514
< 	printf("[ in %s\t"
< 				"my id is:%d\t"
< 				"dst is:%d\t"
< 				"my NodeID is:%d]\n",
< 				__FUNCTION__,
< 				index,
< 				dst,
< 				myNodeID);
---
> 
1620,1621c1521
< 	//在之前进行了一次添加  所以说就一定能在路由表里面找到对应的
< 	//在之前默认添加一个路径的时候是默认为down的
---
> 	
1628,1629c1528
< 	//这里应该是添加一些控制的要求
< 	//就是因为没有对应的路径  所以为down 所以需要进行判断
---
> 	
1644c1543
< 	//这个表示的是我们最多可以进行广播的次数  如果次数超过了 自动的在表中进行查找删除
---
> 	
1649d1547
< 	//在超时包中删除 含有对应节点的包
1664,1665c1562
< 	//在这里是决定这个请求传播的范围可以加入具体的方法进行改进 ！！！！！ 
< 	//进行请求的范围就是寻找最佳路径的范围
---
> 	
1711d1607
< 	//进行数据包的填充
1717d1612
< 	//表示的跳树 上一跳地址
1719c1614
< 	//在这里ip表示为广播的包
---
> 	
1728d1622
< 	//在这里填写具体的目的地址在哪儿
1733c1627
< 			
---
> 	
1746,1747c1640
< 	//请求包的 请求源地址就是这个节点的当前地址
< 	 //相当于每次发送的请求包的请求的源地址都是本地地址  只是目的地址没有变化而已
---
> 	
1759c1652
< //设置具体的包头节点信息 并发送
---
> 
1761d1653
< //是否rrep只是需要进行回去的路线查找而不需要进行路由的寻路了？
1763c1655
< ZBR::sendReply(nsaddr_t ipdst, u_int32_t hop_count, nsaddr_t rpdst,/*代表这个是收到最终目的地址节点的地址 作为发送的其实节点*/
---
> ZBR::sendReply(nsaddr_t ipdst, u_int32_t hop_count, nsaddr_t rpdst,
1767,1779c1659
< 	printf("[ in %s\t,my id is:%d\t"
< 					"rq src is:%d\t"
< 					"rq dst is:%d\t"
< 					"ip src is %d\t"
< 					"ip dst is %d\t"
< 					"my NodeID is:%d]\n",
< 					__FUNCTION__,
< 					index,
< 					index,
< 					rpdst,
< 					index,
< 					ipdst,
< 					myNodeID);
---
> 
1784d1663
< 	//之前进行了添加所以说一定能找到对应的
1790c1669
< 	//这个就是为了获得下一跳的地址
---
> 	
1792d1670
< 		//通过树形找到下一跳的地址
1809,1812d1686
< 	//源地址能理解  但是 目的地址为什么不是这个呢？
< 	//对于这两个地址的理解深入点
< 	//有两个rpdst==index??
< 	//对于源地址都是一样的 就只有目的地址不一样而已   请求包的目的地址为第三个 ip包的目的地址为第一个
1841c1715
< 	//这个ipdst表示的是最后的地址的么？
---
> 	
1844d1717
< 	//代表这个地址为发送待待接受的地址 这个并不是最终的发送请求的源节点的地址
1856c1729
< //以下是对邻居节点的 管理 插入  删除   合并 查找
---
> 
1951d1823
< //计算每一层的客使用节点的偏移量
1971d1842
< //这是计算全部能使用为节点个数
